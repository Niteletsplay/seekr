package db

import (
	"context"

	"github.com/genjidb/genji"
	"github.com/genjidb/genji/document"
	"github.com/genjidb/genji/types"
	"github.com/seekr-osint/seekr/api/person"

	_ "github.com/genjidb/genji/driver"
	"github.com/seekr-osint/seekr/api/config"
)

const (
	DBName = "{{ .Name }}"
)


func Init(cfg config.Config, ctx *context.Context) (*genji.DB,error) {
	if cfg.DataBasePath == "" {
		return nil,ErrEmptyDBPath
	}

	db, err := genji.Open(cfg.DataBasePath)
	if err != nil {
		return db,err
	}
	db = db.WithContext(*ctx)
	// defer db.Close()

	err = db.Exec(GenerateCreateTableSQL(person.Person{},DBName))
	if err != nil {
		return db,err
	}
	
	return db,nil
}

func Read(id int, db *genji.DB) (person.Person,error) {
	tx, err := db.Begin(false)
	defer tx.Rollback()
	if err != nil {
		return person.Person{}, err
	}
	res, err := tx.Query("SELECT * FROM" + DBName + "WHERE id = ?", id)
	if err != nil {
		return person.Person{}, err
	}

	defer res.Close()
	data := person.Person{}
	err = res.Iterate(func(d types.Document) error {
		document.Scan(d, {{ .Pointers }})
		return nil
	})
	if err != nil {
		return person.Person{}, err
	}
	
	return data, nil
}
